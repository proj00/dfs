name: Project build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # .NET Build and Test Job
  build:
    runs-on: windows-latest
    permissions: read-all

    steps:
      - uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
  
      - name: Checkout submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache .NET SDK
        uses: actions/cache@v3
        with:
          path: ~/.dotnet
          key: ${{ runner.os }}-dotnet-sdk-${{ matrix.dotnet-version }}

      - name: Restore .NET dependencies
        run: dotnet restore dfs/dfs.slnf

      - name: Build .NET project
        run: dotnet build --no-restore dfs/dfs.slnf

  # .NET Test and Coverage Collection Job
  test:
    runs-on: windows-latest
    permissions: read-all
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Run .NET tests and collect code coverage
        run: |
          dotnet test /p:ParallelizeTestCollections=false --verbosity normal dfs/dfs.slnf /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Upload .NET Coverage Report to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: dfs/integration-tests/coverage.opencover.xml
          name: dotnet-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # UI Test Job (Jest)
  ui-tests:
    runs-on: windows-latest
    permissions: read-all
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js (22.x)
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Restore npm dependencies
        working-directory: ./dfs/electron
        run: npm ci

      - name: Build UI
        working-directory: ./dfs/electron
        run: npm run test-build

      - name: Run Jest tests with coverage
        working-directory: ./dfs/electron
        run: npx jest --coverage

      - name: Upload Jest Coverage Report to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./dfs/electron/coverage/lcov-report/lcov-report.json
          name: jest-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # SonarCloud .NET Report Job
  sonarcloud-dotnet-report:
    runs-on: windows-latest
    needs: [test]  # Ensure setup and tests are done before this
    steps:
      - uses: actions/checkout@v4

      - name: Install .NET SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:$HOME/.dotnet/tools"

      - name: Upload .NET Coverage Report to SonarCloud
        run: |
          dotnet sonarscanner begin /k:"your-project-key" /d:sonar.login=$SONAR_TOKEN
          dotnet build dfs/dfs.slnf
          dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN

  # SonarCloud Jest (TypeScript) Report Job
  sonarcloud-jest-report:
    runs-on: windows-latest
    needs: [ui-tests]  # Ensure setup and tests are done before this
    steps:
      - uses: actions/checkout@v4

      - name: Install SonarScanner (for Jest)
        run: |
          npm install -g sonar-scanner

      - name: Upload Jest Coverage Report to SonarCloud
        run: |
          sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=your-project-key \
          -Dsonar.sources=./dfs/electron \
          -Dsonar.javascript.lcov.reportPaths=./dfs/electron/coverage/lcov-report/lcov-report.json
